plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //spring
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //h2 + test
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //firebase FCM
    implementation 'com.google.firebase:firebase-admin:9.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

def jacocoExcludePatterns = [
        'com/ixi_U/IxiUApplication.class',
        '**/common/**',
        '**/exception/**',
        '**/dto/**',
        '**/config/**',
        '**/test/**'
]

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: jacocoExcludePatterns)
    }))
}

clean {
    delete file('src/main/generated')
}
