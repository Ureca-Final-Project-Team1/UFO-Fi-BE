name: PR Agent

on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  issue_comment:
    types: [ created, edited ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pr_agent_job:
    if: ${{ github.event.sender.type != 'Bot' && !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    name: Run PR Agent (GPT-4o-mini)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: PR Agent action
        id: pragent
        uses: Codium-ai/pr-agent@main
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_AGENT.CONFIG.LANGUAGE: 'ko'
          PR_AGENT.PR_REVIEWER.EXTRA_INSTRUCTIONS: >
            모든 리뷰 코멘트는 반드시 한국어로 작성해주세요.

            리뷰 시 다음 코드 컨벤션을 반드시 검토하고 지적해주세요:

            1. **Controller**
               - HTTP Method에 따라 API를 분리합니다. (`@GetMapping`, `@PostMapping` 등)
               - URI는 버전정보(`/v1/...`)를 포함해야 합니다.
               - 컨트롤러는 비즈니스 로직 없이 단순 요청/응답만 수행해야 하며, 예외 처리는 서비스에서 담당합니다.
               - DTO는 명확한 목적에 따라 네이밍합니다. (`UserDeleteRequest`, `UsersRequest` 등)

            2. **DTO**
               - 요청 객체는 `@NoArgsConstructor`, `@Getter`를 사용하며 응답 객체는 `@Builder`, 정적 팩토리 메서드(`from()`)를 활용합니다.
               - 컬렉션 응답은 래퍼 클래스를 사용합니다. (e.g., `DefaultAddonsResponse`)

            3. **Service**
               - 단일 조회에는 `@Transactional(readOnly = true)`를 사용하고, 예외는 `GlobalException`과 `ErrorCode` Enum으로 처리합니다.
               - DTO ↔ Entity 변환은 별도 메서드로 분리하여 구성합니다.

            4. **Repository**
               - 기본 CRUD는 `JpaRepository`를 사용하고, 복잡한 조회는 `QueryDsl` 또는 `JdbcTemplate`을 활용합니다.

            5. **Entity**
               - `@Builder`, `@NoArgsConstructor`, `@AllArgsConstructor`를 사용하며, 엔티티는 정적 팩토리 메서드로 초기화합니다.
               - 연관관계 설정 시 편의 메서드를 제공해야 하며, 1:N 관계는 명확히 표시합니다.

            6. **Config**
               - 설정 클래스는 `@Configuration`을 사용하며, 기능별로 분리합니다.
               - Bean 메서드는 소문자로 시작하고, 카멜케이스를 따릅니다.
            
            7. **Code Style (Tabs & Indents)**
               - 들여쓰기는 공백 4칸을 사용하고, 탭 문자는 사용하지 않습니다.
               - 줄이 길어져 다음 줄로 이어질 경우, continuation indent는 4칸을 사용합니다.
               - 라벨(label) 문법 사용 시 indent는 0으로 설정합니다.
               - 들여쓰기는 표현식의 시작 지점 기준이 아니라 블록 구조에 따라 적용해야 합니다.


            위 컨벤션을 지키지 않는 코드가 있다면 반드시 지적하고 예시와 함께 수정 제안을 제공해주세요.
